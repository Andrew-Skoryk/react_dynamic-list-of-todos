{"version":3,"sources":["components/TodoList/TodoList.tsx","utils/debounce.ts","components/TodoFilter/TodoFilter.tsx","api.ts","types/SelectOptions.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","todos","selectedTodoId","handleSelectTodo","className","map","id","title","completed","isSelected","cn","type","onClick","debounce","f","delay","timerId","str","clearTimeout","setTimeout","TodoFilter","query","selectedOption","setSelectedOption","setQuery","useState","currentQuery","setCurrentQuery","handleInpute","useCallback","event","value","target","handleSelect","ressetQuery","onChange","placeholder","style","pointerEvents","get","url","fullURL","Promise","resolve","then","fetch","res","json","SelectOptions","Loader","TodoModal","selectedTodo","handleUnselectTodo","user","setUser","isUserLoaded","setIsUserLoaded","userId","useEffect","getUser","userFromServer","href","email","name","App","setTodos","setSelectedTodoId","isTodosLoaded","setIsTodosLoaded","All","getTodosFromServer","a","todosFromServer","visibleTodos","useMemo","filter","normalizedQuery","toLowerCase","includes","todo","Active","Completed","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f2d6b60.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number;\n  handleSelectTodo: (id: number) => void;\n};\n\nexport const TodoList: FC<Props> = memo(({\n  todos,\n  selectedTodoId,\n  handleSelectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(({\n        id,\n        title,\n        completed,\n      }) => {\n        const isSelected = id === selectedTodoId;\n\n        return (\n          <tr\n            key={id}\n            data-cy=\"todo\"\n            className=\"\"\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => handleSelectTodo(id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn({\n                      'far fa-eye-slash': isSelected,\n                      'far fa-eye': !isSelected,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n));\n","type Callback = (str: string) => void;\n\nexport const debounce = (f: Callback, delay: number) => {\n  let timerId: NodeJS.Timeout;\n\n  return (str: string) => {\n    clearTimeout(timerId);\n\n    timerId = setTimeout(f, delay, str);\n  };\n};\n","import {\n  FC,\n  useState,\n  ChangeEvent,\n  useCallback,\n  memo,\n} from 'react';\nimport { SelectOptions } from '../../types/SelectOptions';\nimport { debounce } from '../../utils/debounce';\n\ntype Props = {\n  query: string;\n  selectedOption: SelectOptions;\n  setSelectedOption: (options: SelectOptions) => void;\n  setQuery: (query: string) => void;\n};\n\nexport const TodoFilter: FC<Props> = memo(({\n  query,\n  selectedOption,\n  setSelectedOption,\n  setQuery,\n}) => {\n  const [currentQuery, setCurrentQuery] = useState(query);\n\n  const handleInpute = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setCurrentQuery(value);\n    debounce(setQuery, 1000)(value);\n  }, [setCurrentQuery, debounce]);\n\n  const handleSelect = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(event.target.value as SelectOptions);\n  }, [selectedOption]);\n\n  const ressetQuery = useCallback(() => {\n    setCurrentQuery('');\n    setQuery('');\n  }, [setCurrentQuery, setQuery]);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={currentQuery}\n          onChange={handleInpute}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={ressetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SelectOptions {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo;\n  handleUnselectTodo: () => void;\n};\n\nexport const TodoModal: FC<Props> = ({\n  selectedTodo,\n  handleUnselectTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoaded, setIsUserLoaded] = useState(false);\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = selectedTodo;\n\n  useEffect(() => {\n    getUser(userId).then(userFromServer => {\n      setUser(userFromServer);\n      setIsUserLoaded(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isUserLoaded ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => handleUnselectTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { SelectOptions } from './types/SelectOptions';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [isTodosLoaded, setIsTodosLoaded] = useState(false);\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption]\n    = useState<SelectOptions>(SelectOptions.All);\n\n  const handleSelectTodo = useCallback((id: number) => {\n    setSelectedTodoId(id);\n  }, []);\n\n  const handleUnselectTodo = useCallback(() => {\n    setSelectedTodoId(0);\n  }, []);\n\n  const getTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n    setIsTodosLoaded(true);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    const todosMatchedQuery = todos.filter(({ title }) => {\n      const normalizedQuery = query.toLowerCase();\n      const normalizedTitle = title.toLowerCase();\n      const includedInTitle = normalizedTitle.includes(normalizedQuery);\n\n      return includedInTitle;\n    });\n\n    return todosMatchedQuery.filter((todo => {\n      switch (selectedOption) {\n        case SelectOptions.Active:\n          return !todo.completed;\n        case SelectOptions.Completed:\n          return todo.completed;\n        default:\n          return todo;\n      }\n    }));\n  }, [selectedOption, query, todos]);\n\n  const selectedTodo = todos.find(({ id }) => id === selectedTodoId);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                selectedOption={selectedOption}\n                setSelectedOption={setSelectedOption}\n                setQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isTodosLoaded\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodoId={selectedTodoId}\n                    handleSelectTodo={handleSelectTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          handleUnselectTodo={handleUnselectTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}